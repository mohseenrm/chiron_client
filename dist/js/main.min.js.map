{"version":3,"sources":["main.js"],"names":["SpeechRecognition","webkitSpeechRecognition","SpeechGrammarList","webkitSpeechGrammarList","SpeechRecognitionEvent","webkitSpeechRecognitionEvent","name","console","log","colors","grammar","recognition","speechRecognitionList","document","last","speechToText","join","addFromString","grammars","lang","interimResults","maxAlternatives","body","onclick","start","onresult","event","results","length","transcript","getElementById","innerHTML","confidence","onspeechend","stop","onnomatch","onerror","e"],"mappings":"AAAA,YAEA,IAAMA,mBAAoBA,mBAAqBC,wBAC3CC,kBAAoBA,mBAAqBC,wBACzCC,uBAAyBA,wBAA0BC,8BAEvD,WACI,GAAMC,GAAO,MACbC,SAAQC,IAARD,SAAAD,EAAAC,IAeA,IAAME,IAiDFC,OA/CI,QAiDJC,QACAC,SACJA,QACAD,OACA,QACAA,YACAA,QACAA,UA/CQ,OAiDRE,UACIF,aACAJ,OAFJ,YA5CQ,OAiDRI,QACI,SACA,QACA,QACA,WACA,OACA,QACA,UACA,SACA,WA/CI,OAiDEG,QACFC,SA/CA,SAiDJF,OA/CI,OAiDJN,OACAA,SAjBJ,MA7BQ,SAiDRI,SACIA,SADJ,OAGAA,MACIJ,OADJ,UAGAI,SACIJ,YADJ,SA5GJ,QAgEY,UAEJG,EAAU,gDAAkDD,EAAOO,KAAK,OAAS,KAEjFL,EAAc,GAAIX,mBAClBY,EAAwB,GAAIV,kBAChCU,GAAsBK,cAAcP,EAAS,GAC7CC,EAAYO,SAAWN,EAEvBD,EAAYQ,KAAO,QACnBR,EAAYS,gBAAiB,EAC7BT,EAAYU,gBAAkB,EAE9BR,SAASS,KAAKC,QAAU,WACpBZ,EAAYa,QACZjB,QAAQC,IAAI,sCAGhBG,EAAYc,SAAW,SAACC,GAWpB,GAAMZ,GAAOY,EAAMC,QAAQC,OAAS,EAChCb,EAAeW,EAAMC,QAAQb,GAAM,GAAGe,UAE1ChB,UAASiB,eAAe,aAAaC,UAAYhB,EAEjDR,QAAQC,IAAR,mBAA+BO,GAC/BR,QAAQC,IAAI,eAAiBkB,EAAMC,QAAQ,GAAG,GAAGK,aAGrDrB,EAAYsB,YAAc,WACtBtB,EAAYuB,QAEhBvB,EAAYwB,UAAY,WACpB5B,QAAQC,IAAI,aAEhBG,EAAYyB,QAAU,SAACC,GACnB9B,QAAQC,IAAI6B","file":"main.min.js","sourcesContent":["'use strict';\n\nconst SpeechRecognition = SpeechRecognition || webkitSpeechRecognition,\n    SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList,\n    SpeechRecognitionEvent = SpeechRecognitionEvent || webkitSpeechRecognitionEvent;\n\n(() => {\n    const name = 'MoMo';\n    console.log(`Hello ${name}!`);\n    // const client_id = ''; const url = `https://api.amazon.com/auth/o2/token`;\n    // $.ajax({         url: 'https://api.amazon.com/auth/o2/', contentType:\n    // 'application/x-www-form-urlencoded',         data: { format: 'json' },\n    // error: function() { $('#info').html('<p>An error has occurred</p>'); },\n    //   dataType: 'json',         success: function(data) { var $title =\n    // $('<h1>').text(data.talks[0].talk_title);             var $description =\n    // $('<p>').text(data.talks[0].talk_description); $('#info') .append($title)\n    //             .append($description);         },    type: 'POST' }); const url2\n    // = ``;\n    // https://developer.amazon.com/blogs/post/Tx3CX1ETRZZ2NPC/alexa-account-linking\n    // - 5-steps-to-seamlessly-link-your-alexa-skill-with-login-with-amazon $.post(\n    // url,     {         client_id: \"John\",         time: \"2pm\"     }, (data)=>{\n    // console.log(data);     } );\n\n    const colors = [\n            'aqua',\n            'azure',\n            'beige',\n            'bisque',\n            'black',\n            'blue',\n            'brown',\n            'chocolate',\n            'coral',\n            'crimson',\n            'cyan',\n            'fuchsia',\n            'ghostwhite',\n            'gold',\n            'goldenrod',\n            'gray',\n            'green',\n            'indigo',\n            'ivory',\n            'khaki',\n            'lavender',\n            'lime',\n            'linen',\n            'magenta',\n            'maroon',\n            'moccasin',\n            'navy',\n            'olive',\n            'orange',\n            'orchid',\n            'peru',\n            'pink',\n            'plum',\n            'purple',\n            'red',\n            'salmon',\n            'sienna',\n            'silver',\n            'snow',\n            'tan',\n            'teal',\n            'thistle',\n            'tomato',\n            'turquoise',\n            'violet',\n            'white',\n            'yellow'\n        ],\n        grammar = '#JSGF V1.0; grammar colors; public <color> = ' + colors.join(' | ') + ' ;';\n\n    let recognition = new SpeechRecognition(),\n        speechRecognitionList = new SpeechGrammarList();\n    speechRecognitionList.addFromString(grammar, 1);\n    recognition.grammars = speechRecognitionList;\n    //recognition.continuous = false;\n    recognition.lang = 'en-US';\n    recognition.interimResults = false;\n    recognition.maxAlternatives = 1;\n\n    document.body.onclick = function () {\n        recognition.start();\n        console.log('Ready to receive a color command.');\n    }\n\n    recognition.onresult = (event) => {\n        // The SpeechRecognitionEvent results property returns a\n        // SpeechRecognitionResultList object The SpeechRecognitionResultList object\n        // contains SpeechRecognitionResult objects. It has a getter so it can be\n        // accessed like an array The [last] returns the SpeechRecognitionResult at the\n        // last position. Each SpeechRecognitionResult object contains\n        // SpeechRecognitionAlternative objects that contain individual results. These\n        // also have getters so they can be accessed like arrays. The [0] returns the\n        // SpeechRecognitionAlternative at position 0. We then return the transcript\n        // property of the SpeechRecognitionAlternative object\n\n        const last = event.results.length - 1,\n            speechToText = event.results[last][0].transcript;\n        \n        document.getElementById('hint-text').innerHTML = speechToText;\n        \n        console.log(`Color recieved: ${speechToText}`);\n        console.log('Confidence: ' + event.results[0][0].confidence);\n    };\n\n    recognition.onspeechend = () => {\n        recognition.stop();\n    };\n    recognition.onnomatch = () => {\n        console.log('No match');\n    };\n    recognition.onerror = (e) => {\n        console.log(e);\n    }\n\n})();"],"sourceRoot":"."}