#bottom-wrapper,#logo-wrapper{width:100%;height:50%}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:400;src:local('Source Sans Pro'),local('SourceSansPro-Regular'),url(https://fonts.gstatic.com/s/sourcesanspro/v9/ODelI1aHBYDBqgeIAH2zlNzbP97U9sKh0jjxbPbfOKg.ttf) format('truetype')}@font-face{font-family:Nunito;font-style:normal;font-weight:600;src:local('Nunito SemiBold'),local('Nunito-SemiBold'),url(https://fonts.gstatic.com/s/nunito/v8/NcqjkPJTQZlJIFxZdZcTe6CWcynf_cDxXwCLxiixG1c.ttf) format('truetype')}a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:'';content:none}table{border-collapse:collapse;border-spacing:0}#base-wrapper,#mother-wrapper{height:100%;width:100%;display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex}#mother-wrapper{background:-webkit-linear-gradient(-1deg,#0e364d,#060608);background:linear-gradient(-1deg,#0e364d,#060608);flex-direction:column}#logo-wrapper{display:flex;background:url(../../images/logo2.svg) no-repeat;background-size:25%;background-position-x:center;background-position-y:20%;opacity:.85;align-items:center;justify-content:center}#bottom-wrapper{display:flex;align-items:center;justify-content:center;flex-direction:column}.iconCircleInt,.iconsBg,.iconsHover,.iconsHoverBg,.iconsHoverBorder{display:inline-block;text-align:center}.iconsHover{width:10rem;height:10rem;position:relative;margin:0 auto}.iconCircleInt,.iconsBg,.iconsHoverBg,.iconsHoverBorder,.iconsHoverFont{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.iconsHoverBorder{width:0;height:0;border:2px solid #425462;border-radius:50%;-webkit-transition:all .3s ease;-moz-transition:all .3s ease;transition:all .3s ease;z-index:5;opacity:0}.iconCircleInt,.iconsBg,.iconsHoverBg{width:9rem;height:9rem;color:#425462}.iconsBg,.iconsHoverBg{border-radius:50%}.iconsBg{background:#fff;z-index:10}.iconsHoverBg{background:#bfd255;background:-moz-linear-gradient(-45deg,#b33737 0,#ab2121 50%,#771717 51%,#661313 100%);background:-webkit-linear-gradient(-45deg,#b33737 0,#ab2121 50%,#771717 51%,#661313 100%);background:linear-gradient(135deg,#b33737 0,#ab2121 50%,#771717 51%,#661313 100%);opacity:0;z-index:15;-webkit-transition:opacity .5s ease;-moz-transition:aopacity .5s ease;transition:opacity .5s ease}.fa-2x{font-size:6rem}.iconCircleInt{border:1px solid #425462;border-radius:50%;-webkit-transition:all .5s ease;-moz-transition:all .5s ease;transition:all .5s ease;background:0 0;z-index:20}.iconsHoverFont{z-index:25}.iconsHover:hover .iconsHoverBorder{width:10rem;height:10rem;border:2px solid #425462;opacity:1}.iconsHover:hover .iconsHoverBg{opacity:1}.iconsHover:hover .ico2{color:#fff;-moz-animation:pulse .6s infinite;-o-animation:pulse .6s infinite;-webkit-animation:pulse .6s infinite;animation:pulse .6s infinite}@-webkit-keyframes pulse{0%,100%,50%{-webkit-transform:scale(1,1)}25%{-webkit-transform:scale(1.5,1.5)}75%{-webkit-transform:scale(1.2,1.2)}}@-moz-keyframes pulse{0%,100%,50%{-moz-transform:scale(1,1)}25%{-moz-transform:scale(1.5,1.5)}75%{-moz-transform:scale(1.2,1.2)}}@-o-keyframes pulse{0%,100%,50%{-o-transform:scale(1,1)}25%{-o-transform:scale(1.5,1.5)}75%{-o-transform:scale(1.2,1.2)}}@-ms-keyframes pulse{0%,100%,50%{-ms-transform:scale(1,1)}25%{-ms-transform:scale(1.5,1.5)}75%{-ms-transform:scale(1.2,1.2)}}@keyframes pulse{0%,100%,50%{transform:scale(1,1)}25%{transform:scale(1.5,1.5)}75%{transform:scale(1.2,1.2)}}#header{font-size:4rem;color:#fff;margin-top:22%;letter-spacing:2.5px}#hint-text{margin-top:10%;font-size:1.5rem;color:#fff;font-weight:400;letter-spacing:1px}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
